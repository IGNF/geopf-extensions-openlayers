{"version":3,"file":"GpfExtOlGeoportalAttribution.js","mappings":"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","sources":["webpack://geopf-extensions-openlayers/./node_modules/loglevel/lib/loglevel.js","webpack://geopf-extensions-openlayers/webpack/bootstrap","webpack://geopf-extensions-openlayers/webpack/runtime/compat get default export","webpack://geopf-extensions-openlayers/webpack/runtime/define property getters","webpack://geopf-extensions-openlayers/webpack/runtime/hasOwnProperty shorthand","webpack://geopf-extensions-openlayers/external assign \"ol.control.Attribution\"","webpack://geopf-extensions-openlayers/external assign \"ol.proj\"","webpack://geopf-extensions-openlayers/./src/packages/Utils/LayerUtils.js","webpack://geopf-extensions-openlayers/./src/packages/Utils/LoggerByDefault.js","webpack://geopf-extensions-openlayers/./src/packages/Controls/Attribution/GeoportalAttribution.js"],"sourcesContent":["/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    var _loggersByName = {};\n    var defaultLogger = null;\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods() {\n        /*jshint validthis:true */\n        var level = this.getLevel();\n\n        // Replace the actual methods.\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, this.name);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n\n        // Return any important warnings.\n        if (typeof console === undefinedType && level < this.levels.SILENT) {\n            return \"No console available for logging\";\n        }\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, _level, _loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, factory) {\n      // Private instance variables.\n      var self = this;\n      /**\n       * The level inherited from a parent logger (or a global default). We\n       * cache this here rather than delegating to the parent so that it stays\n       * in sync with the actual logging methods that we have installed (the\n       * parent could change levels but we might not have rebuilt the loggers\n       * in this child yet).\n       * @type {number}\n       */\n      var inheritedLevel;\n      /**\n       * The default level for this logger, if any. If set, this overrides\n       * `inheritedLevel`.\n       * @type {number|null}\n       */\n      var defaultLevel;\n      /**\n       * A user-specific level for this logger. If set, this overrides\n       * `defaultLevel`.\n       * @type {number|null}\n       */\n      var userLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var cookieName = encodeURIComponent(storageKey);\n                  var location = cookie.indexOf(cookieName + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(\n                          cookie.slice(location + cookieName.length + 1)\n                      )[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      function normalizeLevel(input) {\n          var level = input;\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              return level;\n          } else {\n              throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\n          }\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          if (userLevel != null) {\n            return userLevel;\n          } else if (defaultLevel != null) {\n            return defaultLevel;\n          } else {\n            return inheritedLevel;\n          }\n      };\n\n      self.setLevel = function (level, persist) {\n          userLevel = normalizeLevel(level);\n          if (persist !== false) {  // defaults to true\n              persistLevelIfPossible(userLevel);\n          }\n\n          // NOTE: in v2, this should call rebuild(), which updates children.\n          return replaceLoggingMethods.call(self);\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = normalizeLevel(level);\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          userLevel = null;\n          clearPersistedLevel();\n          replaceLoggingMethods.call(self);\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      self.rebuild = function () {\n          if (defaultLogger !== self) {\n              inheritedLevel = normalizeLevel(defaultLogger.getLevel());\n          }\n          replaceLoggingMethods.call(self);\n\n          if (defaultLogger === self) {\n              for (var childName in _loggersByName) {\n                _loggersByName[childName].rebuild();\n              }\n          }\n      };\n\n      // Initialize all the internal levels.\n      inheritedLevel = normalizeLevel(\n          defaultLogger ? defaultLogger.getLevel() : \"WARN\"\n      );\n      var initialLevel = getPersistedLevel();\n      if (initialLevel != null) {\n          userLevel = normalizeLevel(initialLevel);\n      }\n      replaceLoggingMethods.call(self);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    defaultLogger = new Logger();\n\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n            throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n            logger = _loggersByName[name] = new Logger(\n                name,\n                defaultLogger.methodFactory\n            );\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = ol.control.Attribution;","const __WEBPACK_NAMESPACE_OBJECT__ = ol.proj;","/**\n* @module LayerUtils\n* @alias module:~utils/LayerUtils\n* @description\n* ...\n*\n* @example\n* import LayerUtils from \"gpf-ext-ol/utils/LayerUtils\"\n* ou \n* import {LayerUtils} from \"gpf-ext-ol\n\n* LayerUtils.getZoomLevelFromScaleDenominator();\n* LayerUtils.getAttributions();\n* LayerUtils.intersects();\n*/\nvar LayerUtils = {\n\n    /**\n     * Obtenir le ZoomLevel à partir du ScaleDenominator\n     * @function getZoomLevelFromScaleDenominator\n     * @param {Number} scaleDenominator - the scale denominator\n     * @param {String} crs - the crs\n     *\n     * @returns {Integer} zoom level\n     */\n    getZoomLevelFromScaleDenominator : function (scaleDenominator, crs) {\n        // ------------------------------------------------- //\n        // Code issu de l'API Geoportal/Catalogue/Config.js  //\n        // ------------------------------------------------- //\n        //     var configuration = Gp.Config;\n        //     var general = configuration.generalOptions;\n        //     var layers  = configuration.layersContext;\n        //\n        //     for (var tms in general.tileMatrixSets) {\n        //         var tileMatrixSet = general.tileMatrixSets[tms];\n        //         // IGN's WMTS bug : epsg:nnnn instead of EPSG:nnnn\n        //         var crs = tileMatrixSet.supportedCRS = tileMatrixSet.supportedCRS.replace(/epsg/,\"EPSG\");\n        //\n        //         if (!Geoportal.Catalogue.CRSRESOLUTIONS.hasOwnProperty(crs)) {\n        //             var p= new OpenLayers.Projection(crs);\n        //             Geoportal.Catalogue.CRSRESOLUTIONS[crs]= [];\n        //             var matrixIds= tileMatrixSet.matrixIds;\n        //             for (var i= 0, li= matrixIds.length; i<li; ++i) {\n        //                 var mid= matrixIds[i];\n        //                 Geoportal.Catalogue.CRSRESOLUTIONS[crs].push(\n        //                     0.00028*mid.scaleDenominator\n        //                     /(OpenLayers.METERS_PER_INCH*OpenLayers.INCHES_PER_UNIT[p.getUnits()]));\n        //                     mid.supportedCRS= mid.supportedCRS.replace(/epsg/,\"EPSG\");\n        //                 }\n        //                 Geoportal.Catalogue.CRSRESOLUTIONS[crs].sort(function (a,b){ return b-a; });\n        //             }\n        //         }\n        //         var llR= Geoportal.Catalogue.CRSRESOLUTIONS['CRS:84'];\n        //         if (!llR) {\n        //             llR= Geoportal.Catalogue.CRSRESOLUTIONS['CRS:84']= general.resolutions.slice();\n        //         }\n        //         var wmR= Geoportal.Catalogue.CRSRESOLUTIONS['EPSG:3857'];\n        //         if (!wmR) {//FIXME : should never happened !!\n        //             // reproject resolutions from CRS84 to WebMercator (transform resolutions from degree/px to meter/px)\n        //             wmR= Geoportal.Catalogue.CRSRESOLUTIONS['EPSG:3857']= new Array(llR.length);\n        //             for (var i= 0, len= llR.length; i<len; i++) {\n        //                 var pt= new OpenLayers.LonLat(llR[i], 0);\n        //                 pt.transform(OpenLayers.Projection.CRS84, OpenLayers.Projection.WebMercator);\n        //                 wmR[i]= pt.lon;\n        //             }\n        //         }\n        //         Geoportal.Catalogue.RESOLUTIONS= wmR;\n        //\n        //         var getResolutionsFromCRS= function(crs) {\n        //             if (OpenLayers.Projection.WebMercator.isAliasOf(crs)) {\n        //                 return wmR;\n        //             }\n        //             if (OpenLayers.Projection.CRS84.isAliasOf(crs)) {\n        //                 return llR;\n        //             }\n        //             return Geoportal.Catalogue.CRSRESOLUTIONS[crs]?Geoportal.Catalogue.CRSRESOLUTIONS[crs]:null ;\n        //         };\n        //\n        //         var retrieveZoomFromResolution= function(resolutions, resolution) {\n        //             for (var i= 0, li= resolutions.length; i<li; i++) {\n        //                 if (resolutions[i]-resolution <= resolutions[li-1]) {\n        //                     return i;\n        //                 }\n        //             }\n        //             return -1;\n        //         };\n        //\n        //         var getZoomLevelFromScaleDenominator= function(scaleDenominator,crs) {\n        //             var resolution= scaleDenominator * 0.00028;\n        //             var R= getResolutionsFromCRS(crs);\n        //             if (R) {\n        //                 return retrieveZoomFromResolution(R,resolution);\n        //             }\n        //             resolution= resolution/(OpenLayers.METERS_PER_INCH * OpenLayers.INCHES_PER_UNIT[\"degrees\"]);\n        //             return retrieveZoomFromResolution(llR,resolution);\n        //         };\n        //\n        //         var getZoomLevelFromResolution= function(resolution,crs){\n        //             var R= getResolutionsFromCRS(crs);\n        //             if (R) {\n        //                 return retrieveZoomFromResolution(R,resolution);\n        //             }\n        //             var pt0= new OpenLayers.LonLat(0, 0);\n        //             var pt1= new OpenLayers.LonLat(1, 0);\n        //             pt0.transform(new OpenLayers.Projection(crs),OpenLayers.Projection.CRS84);\n        //             pt1.transform(new OpenLayers.Projection(crs),OpenLayers.Projection.CRS84);\n        //             resolution= resolution*(Math.abs(pt1.lon-pt0.lon));\n        //             return retrieveZoomFromResolution(llR,resolution);\n        //         };\n\n        // par defaut, on utilise la projection WebMercator (EPSG:3857 = PM)\n        // soit la liste des resolutions natives\n        var resolutionsNatives = {};\n        switch (crs) {\n            case \"EPSG:2154\":\n                resolutionsNatives = {\n                    0 : 104579.224549894,\n                    1 : 52277.5323537905,\n                    2 : 26135.4870785954,\n                    3 : 13066.8913818,\n                    4 : 6533.2286041135,\n                    5 : 3266.5595244627,\n                    6 : 1633.2660045974,\n                    7 : 816.629554986,\n                    8 : 408.3139146768,\n                    9 : 204.1567415109,\n                    10 : 102.0783167832,\n                    11 : 51.0391448966,\n                    12 : 25.5195690743,\n                    13 : 12.7597836936,\n                    14 : 6.379891636,\n                    15 : 3.1899457653,\n                    16 : 1.5949728695,\n                    17 : 0.7974864315,\n                    18 : 0.3987432149,\n                    19 : 0.1993716073,\n                    20 : 0.0996858037,\n                    21 : 0.0498429018\n                };\n                break;\n            default:\n                resolutionsNatives = {\n                    0 : 156543.033928041,\n                    1 : 78271.51696402048,\n                    2 : 39135.758482010235,\n                    3 : 19567.87924100512,\n                    4 : 9783.93962050256,\n                    5 : 4891.96981025128,\n                    6 : 2445.98490512564,\n                    7 : 1222.99245256282,\n                    8 : 611.49622628141,\n                    9 : 305.7481131407048,\n                    10 : 152.8740565703525,\n                    11 : 76.43702828517624,\n                    12 : 38.21851414258813,\n                    13 : 19.10925707129406,\n                    14 : 9.554628535647032,\n                    15 : 4.777314267823516,\n                    16 : 2.388657133911758,\n                    17 : 1.194328566955879,\n                    18 : 0.5971642834779395,\n                    19 : 0.2985821417389697,\n                    20 : 0.1492910708694849,\n                    21 : 0.0746455354347424\n                };\n                break;\n        }\n\n        // gestion des autres SRS\n        // TODO\n        // if (crs) {\n        // }\n\n        var resolution = scaleDenominator * 0.00028;\n\n        for (var index in resolutionsNatives) {\n            if (resolutionsNatives.hasOwnProperty(index)) {\n                if (resolutionsNatives[index] <= resolution) {\n                    index = parseInt(index, 10);\n                    return index;\n                }\n            }\n        }\n\n        return 0; // -1 ?\n    },\n\n    /**\n     * Get attributions list for a layer, based on current zoom and extent\n     *\n     * @function getAttributions\n     * @param {Object} params - function params\n     * @param {Array.<Float>} params.extent - map current geographical extent (EPSG:4326) : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n     * @param {Number} params.zoom - map current zoom\n     * @param {String} params.crs - map current projection code (ex \"EPSG:2154\")\n     * @param {Boolean} params.visibility - layer visibility\n     * @param {Gp.Services.Config.Originator} params.originators - resource originators (from Gp.Config.layers[].originators)\n     * @returns {Object} attributions - associative array, mapping originators url (keys) with their properties : html attributions elements\n     */\n    getAttributions : function (params) {\n        var zoom = params.zoom;\n\n        var attributions = [];\n\n        if (params.originators != null && params.visibility) {\n            // drawLogo = boolean, true if attribution should be displayed (zoom, extent), false otherwise\n            var drawLogo;\n            for (var j = 0, jl = params.originators.length; j < jl; j++) {\n                drawLogo = true;\n                var originator = params.originators[j];\n\n                var constraints = params.originators[j].constraints || [];\n                for (var k = 0, kl = constraints.length; k < kl; k++) {\n                    var constraint = constraints[k];\n                    drawLogo = true;\n\n                    var minZoomLevel = this.getZoomLevelFromScaleDenominator(constraint.maxScaleDenominator, params.crs);\n                    var maxZoomLevel = this.getZoomLevelFromScaleDenominator(constraint.minScaleDenominator, params.crs) || 21;\n\n                    // min zoom constraints\n                    if (minZoomLevel && (minZoomLevel > zoom)) {\n                        drawLogo = false;\n                    }\n\n                    // max zoom constraints\n                    if (drawLogo && maxZoomLevel && (maxZoomLevel < zoom)) {\n                        drawLogo = false;\n                    }\n\n                    // bbox constraints\n                    var bbox = constraint.bbox;\n                    if (drawLogo && bbox) {\n                        drawLogo = false;\n                        var viewExtent = params.extent;\n                        if (viewExtent) {\n                            var bounds = [bbox.top, bbox.left, bbox.bottom, bbox.right];\n                            if (this.intersects(viewExtent, bounds)) {\n                                // at least one constraint matches the map ones\n                                drawLogo = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (drawLogo) {\n                    // on a un originator qui correspond au zoom et à l'étendue.\n\n                    var logo = originator.logo;\n                    var url = originator.url;\n                    var name = originator.name ? originator.name : \"\";\n                    var text = originator.attribution;\n\n                    var container = document.createElement(\"div\");\n                    container.className = \"gp-control-attribution\";\n\n                    // on crée un lien dans tous les cas (même s'il ne pointe pas vers une référence), pour avoir accès à la class CSS (pour surcharge)\n                    var link = null;\n                    link = document.createElement(\"a\");\n                    link.className = \"gp-control-attribution-link\";\n                    link.target = \"_blank\";\n                    container.appendChild(link);\n                    if (url) {\n                        link.href = url;\n                    }\n\n                    var bImage = !!(logo);\n                    var image = null;\n                    // si on a un logo, on l'affiche à l'interieur du lien\n                    if (bImage) {\n                        image = document.createElement(\"img\");\n                        if (link) {\n                            image.className = \"gp-control-attribution-image\";\n                            link.appendChild(image);\n                        } else {\n                            image.className = \"\";\n                            container.appendChild(image);\n                        }\n                        image.src = logo;\n                        image.title = text || name;\n                        image.style.height = \"30px\";\n                        image.style.width = \"30px\";\n                    } else {\n                        // sinon, on affiche le nom de l'originator, ou sa description ou l'url.\n                        if (name) {\n                            link.textContent = name;\n                        } else if (text) {\n                            link.textContent = text;\n                        } else if (url) {\n                            link.textContent = url;\n                        } else {\n                            link.textContent = \"\";\n                        }\n                    }\n\n                    attributions.push(container.innerHTML + \" \");\n                }\n            }\n        }\n\n        return attributions;\n    },\n\n    /**\n     * Determines if one extent (extent1) intersects another (extent2)\n     *\n     * @function intersects\n     * @param {Array.<Float>} extent1 - First extent : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n     * @param {Array.<Float>} extent2 - Second extent : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n     * @return {Boolean} intersects - True if the two extents intersect, false otherwise.\n     */\n    intersects : function (extent1, extent2) {\n        var intersectsX = (extent1[1] <= extent2[3]) && (extent2[1] <= extent1[3]);\n        var intersectsY = (extent1[2] <= extent2[0]) && (extent2[2] <= extent1[0]);\n        return intersectsX && intersectsY;\n    }\n};\n\nexport default LayerUtils;\n","import * as Log from \"loglevel\";\n\n/**\n * @module LoggerByDefault\n * @alias module:~utils/Logger\n * @description\n * ...\n *\n * @example\n * import Logger from \"gpf-ext-ol/utils/LoggerByDefault\"\n * ou \n * import {Logger} from \"gpf-ext-ol\n * \n * Logger.getLogger();\n * Logger.disableAll();\n * Logger.enableAll();\n */\nvar LoggerByDefault = {\n    /**\n     * creation d'un logger statique\n     *\n     * @function getLogger\n     * @param {String} [name=\"default\"] - the logger name\n     * @returns {Object} logger\n     */\n    getLogger : function (name) {\n        // on définit process si non défini dans l'environnement\n        if (typeof process === \"undefined\") {\n            var process = {};\n            process.env = {\n                VERBOSE : false\n            };\n        }\n        (process.env.VERBOSE) ? Log.enableAll() : Log.disableAll();\n        var logname = name || \"default\";\n        return Log.getLogger(logname);\n    },\n    /**\n     * desactive tous les loggers\n     * @function disableAll\n     */\n    disableAll : function () {\n        var loggers = Log.getLoggers();\n        for (const key in loggers) {\n            if (Object.hasOwnProperty.call(loggers, key)) {\n                const logger = loggers[key];\n                logger.disableAll();\n            }\n        }\n    },\n    /**\n     * active tous les loggers\n     * @function enableAll\n     */\n    enableAll : function () {\n        var loggers = Log.getLoggers();\n        for (const key in loggers) {\n            if (Object.hasOwnProperty.call(loggers, key)) {\n                const logger = loggers[key];\n                logger.enableAll();\n            }\n        }\n    }\n};\n\nexport default LoggerByDefault;\n\n// Expose Export as ol.control.Catalog (for a build bundle)\nif (window.Gp) {\n    window.Gp.Logger = LoggerByDefault;\n}\n","// import CSS\nimport \"../../CSS/Controls/Attribution/GPFattribution.css\";\n// import \"../../CSS/Controls/Attribution/GPFattributionStyle.css\";\n// import OpenLayers\nimport Attribution from \"ol/control/Attribution\";\nimport { transformExtent as olTransformExtentProj } from \"ol/proj\";\n// import local\nimport LayerUtils from \"../../Utils/LayerUtils\";\nimport Logger from \"../../Utils/LoggerByDefault\";\n\nvar logger = Logger.getLogger(\"geoportalattribution\");\n\n/**\n * @classdesc\n * OpenLayers Control to manage Originators for layer resources\n *\n * @constructor\n * @extends {ol.control.Attribution}\n * @alias ol.control.GeoportalAttribution\n * @type {ol.control.GeoportalAttribution}\n * @param {Object} options - ol.control.Attribution options (see {@link http://openlayers.org/en/latest/apidoc/ol.control.Attribution.html ol.Control.Attribution})\n * @fires attributions:update\n * @example\n * var attribution = new ol.control.GeoportalAttribution({\n *   collapsed : false\n * });\n * map.addControl(attribution);\n * // listeners for attributions update :\n * attribution.on(\"attributions:update\", function (e) {});\n */\nvar GeoportalAttribution = class GeoportalAttribution extends Attribution {\n\n    /**\n     * See {@link ol.control.GeoportalAttribution}\n     * @module GeoportalAttribution\n     * @alias module:~controls/GeoportalAttribution\n     * @param {*} options - options\n     * @example\n     * import GeoportalAttribution from \"gpf-ext-ol/controls/GeoportalAttribution\"\n     * ou \n     * import { GeoportalAttribution } from \"gpf-ext-ol\"\n     */\n    constructor (options) {\n        options = options || {};\n\n        // Attributions are not collapsible for ol/source/OSM except if ...\n        options.collapsible = true;\n        options.collapsed = true;\n\n        super(options);\n\n        if (!(this instanceof GeoportalAttribution)) {\n            throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n        }\n\n\n        return this;\n    }\n\n    /**\n     * Overload setMap function, that enables to catch map events,\n     * such as movend events.\n     *\n     * @param {ol.Map} map - Map.\n     */\n    setMap (map) {\n        if (map != null) {\n            // Remove default ol.control.Attribution\n            var ctrls = map.getControls();\n            ctrls.forEach(\n                (ctrl) => {\n                    if (ctrl instanceof GeoportalAttribution) {\n                        return;\n                    }\n                    if (ctrl) {\n                        var classList = ctrl.element.classList;\n                        for (var i = 0; i < classList.length; i++) {\n                            if (classList[i] === \"ol-attribution\") {\n                                ctrls.remove(ctrl);\n                                break;\n                            }\n                        }\n                    }\n                }\n            );\n\n            // on récupère les attributions des couches déjà ajoutées à la carte.\n            this._updateAttributions(map);\n\n            // At every map movement, layers attributions have to be updated,\n            // according to map and originators zoom and extent.\n            map.on(\n                \"moveend\",\n                () => {\n                    this._updateAttributions(map);\n                }\n            );\n            map.getLayers().on(\n                \"add\",\n                () => {\n                    this._updateAttributions(map);\n                }\n            );\n            map.getLayers().on(\n                \"remove\",\n                () => {\n                    this._updateAttributions(map);\n                }\n            );\n        }\n\n        super.setMap(map);\n    }\n\n    /**\n     * Update map layers attributions\n     *\n     * @param {ol.Map} map - Map.\n     * @private\n     */\n    _updateAttributions (map) {\n        // get map parameters\n        var mapAttributions = {};\n\n        var view = map.getView();\n        // extent, then convert to geographical coordinates\n        var extent = view.calculateExtent(map.getSize());\n        var mapProjection = view.getProjection().getCode();\n        var geoExtent = olTransformExtentProj(extent, mapProjection, \"EPSG:4326\");\n        // transform extent from [minx, miny, maxx, maxy] to [maxy, minx, miny, maxx]\n        var standardExtent = [geoExtent[3], geoExtent[0], geoExtent[1], geoExtent[2]];\n        // zoom\n        var zoom = view.getZoom();\n        // layers\n        var layers = map.getLayers().getArray();\n\n        // info : This option suppresses warnings about functions inside of loops.\n        /* jshint loopfunc: true */\n\n        // loop on layers to get their originators, if there is at least one originator, and if layer is visible.\n        for (var i = 0; i < layers.length; i++) {\n            // distinguish case of ol.layer.Group (which is made up of layers with their own source)\n            // and other ol.layer (with their own source)\n            if (layers[i].getSource) {\n                // single ol.layer\n                this._updateLayerAttributions(layers[i], mapAttributions, standardExtent, mapProjection, zoom);\n            } else if (layers[i].getLayers) {\n                // ol.layer.Group\n                var lyrs = layers[i].getLayers();\n                lyrs.forEach(\n                    (lyr) => {\n                        if (lyr.getSource) {\n                            this._updateLayerAttributions(lyr, mapAttributions, standardExtent, mapProjection, zoom);\n                        } else {\n                            logger.log(\"cannot find layer source in layergroup \", layers[i]);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    /**\n     * Update a layer attributions\n     *\n     * @param {ol.layer} layer - layer\n     * @param {Object} mapAttributions - object recensing attributions already added, to prevent displaying twice the same producer\n     * @param {Array} mapExtent - map current extent\n     * @param {String} mapCrs - map current crs\n     * @param {Number} mapZoom - map current zoom\n     * @private\n     */\n    _updateLayerAttributions (layer, mapAttributions, mapExtent, mapCrs, mapZoom) {\n        if (!layer) {\n            logger.trace(\"layer is null !?\");\n            return;\n        }\n\n        var src = layer.getSource();\n        if (!src) {\n            logger.trace(\"source is not yet loaded !\");\n            return;\n        }\n\n        if (!mapAttributions) {\n            mapAttributions = {};\n        }\n\n        var attributions = [];\n\n        var visibility = layer.getVisible();\n        var originators = src._originators;\n\n        // info : clean previous attributions ONLY for Geoportal Layers (when src._originators is defined)\n        if (typeof originators !== \"undefined\") {\n            src.setAttributions(); // clean\n        }\n\n        if (originators && visibility) {\n            // get layer's attributions array\n            var layerAttributions = LayerUtils.getAttributions({\n                extent : mapExtent,\n                crs : mapCrs,\n                zoom : mapZoom,\n                visibility : visibility,\n                originators : originators\n            });\n\n            for (var j = 0; j < layerAttributions.length; j++) {\n                var attributionj = layerAttributions[j];\n                // check that this attribution hasn't been added yet for another layer\n                if (!mapAttributions.hasOwnProperty(attributionj)) {\n                    // add attribution html\n                    attributions.push(attributionj);\n\n                    // add attribution to mapAttributions, to manage all layers attributions\n                    mapAttributions[attributionj] = true;\n                }\n            };\n\n            // update source attribution\n            if (attributions.length !== 0) {\n                src.setAttributions(attributions);\n                /**\n                * event triggered when the attributions are updated\n                *\n                * @event attributions:update\n                * @type Object\n                * @property {Array} attributions - list of attributions\n                */\n                this.dispatchEvent({\n                    type : \"attributions:update\",\n                    attributions : attributions\n                });\n            }\n        }\n    }\n\n};\n\nexport default GeoportalAttribution;\n\n// Expose GeoportalAttribution as ol.control.GeoportalAttribution (for a build bundle)\nif (window.ol && window.ol.control) {\n    window.ol.control.GeoportalAttribution = GeoportalAttribution;\n}\n"],"names":["noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","_loggersByName","defaultLogger","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","log","trace","realMethod","undefined","replaceLoggingMethods","level","this","getLevel","i","length","methodFactory","name","debug","levels","SILENT","enableLoggingWhenConsoleArrives","defaultMethodFactory","_level","_loggerName","Logger","factory","inheritedLevel","defaultLevel","userLevel","self","storageKey","persistLevelIfPossible","levelNum","levelName","toUpperCase","localStorage","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","cookieName","location","indexOf","exec","slice","clearPersistedLevel","removeItem","normalizeLevel","input","TypeError","setLevel","persist","setDefaultLevel","resetLevel","enableAll","TRACE","disableAll","rebuild","childName","initialLevel","getLogger","logger","_log","noConflict","getLoggers","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","prop","hasOwnProperty","ol","control","Attribution","proj","getZoomLevelFromScaleDenominator","scaleDenominator","crs","resolutionsNatives","resolution","index","parseInt","getAttributions","params","zoom","attributions","originators","visibility","drawLogo","j","jl","originator","constraints","k","kl","constraint","minZoomLevel","maxScaleDenominator","maxZoomLevel","minScaleDenominator","bbox","viewExtent","extent","bounds","top","left","bottom","right","intersects","logo","url","text","attribution","container","createElement","className","link","target","appendChild","href","image","src","title","style","height","width","textContent","push","innerHTML","extent1","extent2","intersectsX","intersectsY","LoggerByDefault","process","VERBOSE","env","Log","logname","loggers","Gp","GeoportalAttribution","_Attribution","options","_this","_classCallCheck","collapsible","collapsed","_possibleConstructorReturn","_inherits","value","map","_this2","ctrls","getControls","forEach","ctrl","classList","element","remove","_updateAttributions","on","getLayers","_this3","mapAttributions","view","getView","calculateExtent","getSize","mapProjection","getProjection","getCode","geoExtent","olTransformExtentProj","standardExtent","getZoom","layers","getArray","getSource","_updateLayerAttributions","lyr","layer","mapExtent","mapCrs","mapZoom","getVisible","_originators","setAttributions","layerAttributions","LayerUtils","attributionj","dispatchEvent","type"],"sourceRoot":""}